service cloud.firestore {
  match /databases/{database}/documents {

    // Public read access to posts
    match /posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Access to users (restricted to authenticated users accessing their own document)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /altarServers/{serverId} {
      allow read, write: if request.auth != null;
    }
    
    match /attendance/{attendanceId} {
      allow read, write: if request.auth != null;
    }


    // Access to appointments
    match /appointments/{appointmentId} {
      allow read, write: if request.auth != null;
    }

    // Access to schedules
    match /schedules/{scheduleId} {
      allow read, write: if request.auth != null;
    }

    // Access to admin events
    match /adminevents/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    // Access to altarServers
    match /altarServers/{serverId} {
      allow read, write: if request.auth != null && isAltarServerPresident(request.auth.uid);
    }
    
    // Access to attendance records
    match /attendance/{attendanceId} {
      allow read, write: if request.auth != null && isAltarServerPresident(request.auth.uid);
    }
  }

  // Function to check if a user is an admin
  function isAdmin(uid) {
    return exists(/databases/$(database)/documents/users/$(uid)) &&
           get(/databases/$(database)/documents/users/$(uid)).data.role == 'Admin';
  }
  
      // Function to check if a user is an altar server president
  function isAltarServerPresident(uid) {
    return exists(/databases/$(database)/documents/users/$(uid)) &&
           get(/databases/$(database)/documents/users/$(uid)).data.role == 'Altar server president';
  }
  }


